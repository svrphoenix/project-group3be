{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.1",
    "title": "GooseTrack",
    "description": "Personal to-do list website"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": [
    {
      "url": "https://goose-backend.onrender.com"
    },
    { "url": "http://localhost:3003" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    { "name": "Reviews", "description": "Reviews endpoints" },
    { "name": "Tasks", "description": "Tasks endpoints" }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "New user registration",
        "description": "This endpoint register new user in database",
        "parameters": [],
        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "401": {
            "description": "Email or password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401LoginResponse"
                }
              }
            }
          },
          "409": {
            "description": "This user is already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409RegistrationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "description": "This endpoint login user",
        "parameters": [],
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "401": {
            "description": "Email or password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401LoginResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "description": "This endpoint logout user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication credentials are missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
        "description": "This endpoint gets information about current user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication credentials are missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      }
    },
    "/users/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh tokens",
        "description": "This endpoint refreshes two security tokens",
        "parameters": [],
        "requestBody": {
          "description": "Tokens object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokensRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "403": {
            "description": "Invalid token error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      }
    },
    "/users/user": {
      "patch": {
        "tags": ["Auth"],
        "summary": "User updating",
        "description": "This endpoint updates user's info in database",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Updating object with form-data",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdatingRequest"
              },
              "encoding": {
                "avatar": { "contentType": "image/png, image/jpeg" }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error400Response" }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication credentials are missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      }
    },
    "/reviews": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get all reviews of all",
        "description": "This endpoint retrieves all reviews of products or services.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllReviews"
                }
              }
            }
          },
          "404": {
            "description": "Reviews not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      }
    },
    "/reviews/own": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get current user's review",
        "description": "Get the review of the current user for a product or service",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserReview"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication credentials are missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Reviews"],
        "summary": "Add review",
        "description": "This endpoint allows user to add a  review for a product or service.",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Review's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddReviewRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review added successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AddReviewResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication credentials are missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "409": {
            "description": "Conflict: The review could not be added due to a conflict with an existing resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409ReviewsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "summary": "Update review by user's id",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Review's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchReviewResponses"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication credentials are missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "404": {
            "description": "Reviews not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Reviews"],
        "summary": "Delete review",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {}
          },
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "404": {
            "description": "Review not found / Invalid user / Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get all tasks for a month for an authorized user",
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "description": "Two digits of the month",
            "schema": {
              "type": "string",
              "example": "09"
            },
            "required": true
          },
          {
            "name": "year",
            "in": "query",
            "description": "Four digits of the year",
            "schema": {
              "type": "string",
              "example": "2023"
            },
            "required": true
          }
        ],

        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllTasksForMonthResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid date format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400AllTasksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "404": {
            "description": "Tasks not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Create new task for an authorized user",
        "parameters": [],

        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "This endpoint is designed for creating new user`s task. If the creation of a new task is successful, the created task object is returned in the response. Access to this endpoint requires authentication, so the authorization token must be included in the request header.",
          "required": true,

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created new task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateTaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid date format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400AllTasksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update task for an authorized user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task's id"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "This endpoint is intended for updating any fields of user tasks. The task search is conducted by its id in the query string. If the task update is successful, the updated task object is returned in the response. Access to this endpoint requires authentication, so the authorization token must be included in the request header.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrUpdateTaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid date format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400AllTasksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "404": {
            "description": "Tasks not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Remove task for an authorized user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task's id"
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "Task deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveTaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Response"
                }
              }
            }
          },
          "404": {
            "description": "Tasks not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404Response"
                }
              }
            }
          },
          "500": {
            "description": "Internal server Error: the server encountered an unexpected condition that prevented it from fulfilling the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500Response"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "test2@i.ua"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "123456Qw"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "User's id in database (type ObjectId)",
                "example": "64d5eb99a3ed01b542412a5f"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Joi"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar file name",
                "example": "http://res.cloudinary.com/dixcrd38z/image/upload/v1692198776/uukgeljzzqsoqguemzsk.png"
              },
              "createdAt": {
                "type": "string",
                "description": "Date of user profile creating",
                "example": "2023-08-11T08:04:41.035Z"
              },
              "refresh_token": {
                "type": "string",
                "description": "Refresh token",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDVlYjk5YTNlZDAxYjU0MjQxMmE1ZiIsImlhdCI6MTY5MjAxMDg4NywiZXhwIjoxNjk0NjAyODg3fQ.6y6K88bc38--1DYZN79FgvUyw4kMnFEhczicJymkguc"
              },
              "birthday": {
                "type": "string",
                "description": "User's date of birth",
                "example": "2000-02-20"
              },
              "phone": {
                "type": "string",
                "description": "User's phone number",
                "example": "38 (000) 123 45 67"
              },
              "skype": {
                "type": "string",
                "description": "User's skype number",
                "example": "38 (000) 123 45 67"
              }
            }
          },
          "token": {
            "type": "string",
            "description": "Access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        }
      },
      "RegistrationRequest": {
        "allOf": [
          {
            "type": "object",
            "required": ["name"],
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Joi"
              }
            }
          },
          {
            "$ref": "#/components/schemas/LoginRequest"
          }
        ]
      },
      "RegistrationResponse": {
        "$ref": "#/components/schemas/LoginResponse"
      },
      "TokensRequest": {
        "type": "object",
        "required": ["refresh_token"],
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "Access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        }
      },
      "TokensResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDVlYjk5YTNlZDAxYjU0MjQxMmE1ZiIsImlhdCI6MTY5MjAxMDg4NywiZXhwIjoxNjk0NjAyODg3fQ.6y6K88bc38--1DYZN79FgvUyw4kMnFEhczicJymkguc"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDVlYjk5YTNlZDAxYjU0MjQxMmE1ZiIsImlhdCI6MTY5MjAxMDg4NywiZXhwIjoxNjk0NjAyODg3fQ.6y6K88bc38--1DYZN79FgvUyw4kMnFEhczicJymkguc"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Logout successful"
          }
        }
      },
      "UpdatingRequest": {
        "type": "object",
        "required": ["name", "email"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "JoiUpdated"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "test2@i.ua"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "User's avatar",
            "example": "beautiful_picture.png"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+38 (000) 123 45 67"
          },
          "skype": {
            "type": "string",
            "description": "User's skype number",
            "example": "+44 (000) 123 45 67"
          },
          "birthday": {
            "type": "string",
            "description": "User's date of birth",
            "example": "2000-02-20"
          }
        }
      },
      "UpdatingResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's id in database (type ObjectId)",
            "example": "64d5eb99a3ed01b542412a5f"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Joi"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "test2@i.ua"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+38 (000) 123 45 67"
          },
          "skype": {
            "type": "string",
            "description": "User's skype number",
            "example": "+44 (000) 123 45 67"
          },
          "birthday": {
            "type": "string",
            "description": "User's date of birth",
            "example": "2000-02-20"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar file name",
            "example": "http://res.cloudinary.com/dixcrd38z/image/upload/v1692198776/uukgeljzzqsoqguemzsk.png"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of user profile creating",
            "example": "2023-08-11T08:04:41.035Z"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDVlYjk5YTNlZDAxYjU0MjQxMmE1ZiIsImlhdCI6MTY5MjAxMDg4NywiZXhwIjoxNjk0NjAyODg3fQ.6y6K88bc38--1DYZN79FgvUyw4kMnFEhczicJymkguc"
          }
        }
      },
      "AllReviews": {
        "type": "array",
        "description": "An array containing all user reviews",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "User's comment about the product or service",
            "maxLength": 300
          },
          "rating": {
            "type": "integer",
            "description": "User's rating of the product or service",
            "minimum": 1,
            "maximum": 5
          },
          "owner": {
            "type": "object",
            "description": "Information about the user who left the review",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name"
              },
              "avatarURL": {
                "type": "string",
                "description": "URL to the user's avatar image"
              }
            }
          }
        },
        "example": [
          {
            "rating": 5,
            "comment": "Really helps to plan the day and visualize tasks. Exactly what I was looking for. Huge thanks to the developers!",
            "owner": {
              "name": "Kateryna Hilcher",
              "avatarURL": "https://example.com/avatar.jpg"
            }
          },
          {
            "rating": 4,
            "comment": "A good, visual time planning program.",
            "owner": {
              "name": "Volodymyr Shvets",
              "avatarURL": "https://example.com/avatar.jpg"
            }
          }
        ]
      },
      "AddReviewRequest": {
        "type": "object",
        "required": ["rating", "comment"],
        "properties": {
          "rating": {
            "type": "integer",
            "description": "Review rating",
            "minimum": 1,
            "maximum": 5
          },
          "comment": {
            "type": "string",
            "description": "Review comment"
          }
        }
      },
      "AddReviewResponse": {
        "type": "object",
        "description": "Data structure for adding a new user review",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "User's comment about the product or service",
            "maxLength": 300
          },
          "rating": {
            "type": "integer",
            "description": "User's rating of the product or service",
            "minimum": 1,
            "maximum": 5
          }
        },
        "example": {
          "rating": 5,
          "comment": "Really helps to plan the day and visualize tasks. Exactly what I was looking for. Huge thanks to the developers!"
        }
      },
      "UserReview": {
        "type": "object",
        "description": "Get the review of the current user for a product or service",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "User's comment about the product or service",
            "maxLength": 300
          },
          "rating": {
            "type": "integer",
            "description": "User's rating of the product or service",
            "minimum": 1,
            "maximum": 5
          }
        },
        "example": {
          "rating": 5,
          "comment": "Really helps to plan the day and visualize tasks. Exactly what I was looking for. Huge thanks to the developers!"
        }
      },
      "PatchReviewRequest": {
        "type": "object",
        "required": ["rating", "comment"],
        "properties": {
          "rating": {
            "type": "integer",
            "description": "Review rating",
            "minimum": 1,
            "maximum": 5
          },
          "comment": {
            "type": "string",
            "description": "Review comment"
          }
        }
      },
      "PatchReviewResponses": {
        "type": "object",
        "description": "Data structure for changing user review",
        "required": ["comment", "rating"],
        "properties": {
          "comment": {
            "type": "string",
            "description": "User's comment about the product or service",
            "maxLength": 300
          },
          "rating": {
            "type": "integer",
            "description": "User's rating of the product or service",
            "minimum": 1,
            "maximum": 5
          }
        },
        "example": {
          "rating": 5,
          "comment": "Really helps to plan the day and visualize tasks. Exactly what I was looking for. Huge thanks to the developers!"
        }
      },
      "BaseTask": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Task`s title. Must have no more than 250 characters",
            "maxLength": 250,
            "example": "Do a morning exercise"
          },
          "start": {
            "type": "string",
            "description": "Task`s start time. Must be in hh:mm format and not exceed 23:59",
            "example": "09:00"
          },
          "end": {
            "type": "string",
            "description": "Task`s end time. Must be in hh:mm format, not exceed 23:59 and be greater than start time",
            "example": "09:10"
          },
          "priority": {
            "type": "string",
            "description": "Task`s priority. Must be one of: low, medium, or high.",
            "enum": ["low", "medium", "high"],
            "example": "medium"
          },
          "date": {
            "type": "string",
            "description": "Task`s completion date. Must be in yyyy.mm.dd format and start from 2023",
            "example": "2023-09-01"
          },
          "category": {
            "type": "string",
            "description": "Task`s category. Must be one of: to-do, in-progress or done",
            "enum": ["to-do", "in-progress", "done"],
            "example": "to-do"
          }
        }
      },
      "AllTasksForMonthResponse": {
        "allOf": [
          {
            "_id": {
              "type": "string",
              "description": "Task's id in database (type ObjectId)",
              "example": "64d5eb99a3ed01b542412a78"
            }
          },
          {
            "$ref": "#/components/schemas/BaseTask"
          },
          {
            "type": "object",
            "properties": {
              "owner": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "User's id in database (type ObjectId)",
                    "example": "tyd5eb99a3ed01b542412a78"
                  },
                  "avatarURL": {
                    "type": "string",
                    "description": "User's avatar URL",
                    "example": "https://vrt.com/upload/avatar.jpg"
                  }
                }
              }
            }
          }
        ]
      },
      "CreateTaskRequest": {
        "type": "object",
        "required": ["title", "start", "end", "priority", "date", "category"],
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTask"
          }
        ]
      },
      "UpdateTaskRequest": {
        "type": "object",
        "description": "At least one field should be present",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTask"
          }
        ],
        "minProperties": 1,
        "additionalProperties": false
      },
      "CreateOrUpdateTaskResponse": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Task's id in database (type ObjectId)",
                "example": "64d5eb99a3ed01b542412a78"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseTask"
          },
          {
            "type": "object",
            "properties": {
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2023-08-10T00:03:36.511+00:00"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2023-08-10T00:03:36.511+00:00"
              }
            }
          }
        ]
      },
      "RemoveTaskResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Task deleted"
          }
        }
      },
      "Error400Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Validation error"
          },
          "status": {
            "type": "integer",
            "example": 400
          }
        }
      },
      "Error400AllTasksResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid date format"
          }
        }
      },
      "Error401Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Unauthorized"
          },
          "status": {
            "type": "integer",
            "example": 401
          }
        }
      },
      "Error401LoginResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email or password is incorrect"
          },
          "status": {
            "type": "integer",
            "example": 401
          }
        }
      },
      "Error403Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid token"
          },
          "status": {
            "type": "integer",
            "example": 403
          }
        }
      },
      "Error404Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not Found"
          },
          "status": {
            "type": "integer",
            "example": 404
          }
        }
      },
      "Error409RegistrationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "This user is already exist"
          },
          "status": {
            "type": "integer",
            "example": 409
          }
        }
      },
      "Error409ReviewsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User review already exist"
          },
          "status": {
            "type": "integer",
            "example": 409
          }
        }
      },
      "Error500Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Internal Server Error"
          },
          "status": {
            "type": "integer",
            "example": 500
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "BearerFormat": "JWT",
        "in": "header",
        "name": "Authorization",
        "description": "Bearer token to access these API endpoints"
      }
    }
  }
}
